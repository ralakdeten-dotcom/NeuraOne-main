# Generated by Django 5.1.11 on 2025-08-12 11:43

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contacts', '0001_initial'),
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Call',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Call purpose/title', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Detailed call description/notes')),
                ('direction', models.CharField(choices=[('inbound', 'Inbound'), ('outbound', 'Outbound')], help_text='Call direction (inbound/outbound)', max_length=10)),
                ('status', models.CharField(choices=[('logged', 'Logged'), ('scheduled', 'Scheduled')], default='logged', help_text='Call outcome status', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', help_text='Call priority level', max_length=10)),
                ('contact_name', models.CharField(blank=True, help_text='Contact name (if not linked to CRM contact)', max_length=255)),
                ('contact_phone', models.CharField(blank=True, help_text='Contact phone number', max_length=20)),
                ('contact_email', models.EmailField(blank=True, help_text='Contact email address', max_length=254)),
                ('call_date', models.DateField(default=django.utils.timezone.now, help_text='Date of the call')),
                ('call_time', models.TimeField(default=django.utils.timezone.now, help_text='Time of the call')),
                ('duration', models.PositiveIntegerField(blank=True, help_text='Call duration in minutes', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('object_id', models.PositiveIntegerField(blank=True, help_text='The ID of the entity this call is related to (optional)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the call record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When the call record was last updated')),
                ('tags', models.JSONField(blank=True, default=list, help_text='Call tags/categories')),
                ('follow_up_required', models.BooleanField(default=False, help_text='Whether this call requires follow-up')),
                ('follow_up_date', models.DateTimeField(blank=True, help_text='When to follow up (if required)', null=True)),
                ('follow_up_notes', models.TextField(blank=True, help_text='Follow-up notes and action items')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this call record is active')),
                ('contact', models.ForeignKey(blank=True, help_text='Contact this call is associated with', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='calls', to='contacts.contact')),
                ('content_type', models.ForeignKey(blank=True, help_text='The type of entity this call is related to (optional)', null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('created_by', models.ForeignKey(help_text='User who logged this call', on_delete=django.db.models.deletion.CASCADE, related_name='created_calls', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Call',
                'verbose_name_plural': 'Calls',
                'db_table': 'call',
                'ordering': ['-call_date', '-call_time', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CallComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='Comment content')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the comment was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When the comment was last updated')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this comment is active')),
                ('author', models.ForeignKey(help_text='User who wrote this comment', on_delete=django.db.models.deletion.CASCADE, related_name='call_comments', to=settings.AUTH_USER_MODEL)),
                ('call', models.ForeignKey(help_text='The call this comment belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='calls.call')),
            ],
            options={
                'verbose_name': 'Call Comment',
                'verbose_name_plural': 'Call Comments',
                'db_table': 'call_comment',
                'ordering': ['created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='call',
            index=models.Index(fields=['direction'], name='idx_call_direction'),
        ),
        migrations.AddIndex(
            model_name='call',
            index=models.Index(fields=['status'], name='idx_call_status'),
        ),
        migrations.AddIndex(
            model_name='call',
            index=models.Index(fields=['priority'], name='idx_call_priority'),
        ),
        migrations.AddIndex(
            model_name='call',
            index=models.Index(fields=['created_by'], name='idx_call_creator'),
        ),
        migrations.AddIndex(
            model_name='call',
            index=models.Index(fields=['contact'], name='idx_call_contact'),
        ),
        migrations.AddIndex(
            model_name='call',
            index=models.Index(fields=['call_date'], name='idx_call_date'),
        ),
        migrations.AddIndex(
            model_name='call',
            index=models.Index(fields=['call_time'], name='idx_call_time'),
        ),
        migrations.AddIndex(
            model_name='call',
            index=models.Index(fields=['created_at'], name='idx_call_created'),
        ),
        migrations.AddIndex(
            model_name='call',
            index=models.Index(fields=['content_type', 'object_id'], name='idx_call_content'),
        ),
        migrations.AddIndex(
            model_name='call',
            index=models.Index(fields=['is_active'], name='idx_call_active'),
        ),
        migrations.AddIndex(
            model_name='call',
            index=models.Index(fields=['follow_up_required'], name='idx_call_followup'),
        ),
        migrations.AddIndex(
            model_name='call',
            index=models.Index(fields=['follow_up_date'], name='idx_call_followup_date'),
        ),
        migrations.AddConstraint(
            model_name='call',
            constraint=models.CheckConstraint(condition=models.Q(('duration__gt', 0), ('duration__isnull', True), _connector='OR'), name='call_duration_positive'),
        ),
        migrations.AddConstraint(
            model_name='call',
            constraint=models.CheckConstraint(condition=models.Q(('contact__isnull', False), models.Q(('contact_name__isnull', False), models.Q(('contact_name', ''), _negated=True)), _connector='OR'), name='call_contact_required'),
        ),
        migrations.AddIndex(
            model_name='callcomment',
            index=models.Index(fields=['call'], name='idx_callcomment_call'),
        ),
        migrations.AddIndex(
            model_name='callcomment',
            index=models.Index(fields=['author'], name='idx_callcomment_author'),
        ),
        migrations.AddIndex(
            model_name='callcomment',
            index=models.Index(fields=['created_at'], name='idx_callcomment_created'),
        ),
        migrations.AddIndex(
            model_name='callcomment',
            index=models.Index(fields=['is_active'], name='idx_callcomment_active'),
        ),
    ]
