# Generated by Django 5.1.11 on 2025-08-12 11:43

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contacts', '0001_initial'),
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Meeting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Meeting purpose/title', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Detailed meeting description/notes')),
                ('status', models.CharField(choices=[('logged', 'Logged'), ('scheduled', 'Scheduled')], default='logged', help_text='Meeting status', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', help_text='Meeting priority level', max_length=10)),
                ('contact_name', models.CharField(blank=True, help_text='Contact name (if not linked to CRM contact)', max_length=255)),
                ('contact_phone', models.CharField(blank=True, help_text='Contact phone number', max_length=20)),
                ('contact_email', models.EmailField(blank=True, help_text='Contact email address', max_length=254)),
                ('meeting_date', models.DateField(default=django.utils.timezone.now, help_text='Date of the meeting')),
                ('meeting_time', models.TimeField(default=django.utils.timezone.now, help_text='Time of the meeting')),
                ('duration', models.PositiveIntegerField(blank=True, help_text='Meeting duration in minutes', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('object_id', models.PositiveIntegerField(blank=True, help_text='The ID of the entity this meeting is related to (optional)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the meeting record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When the meeting record was last updated')),
                ('tags', models.JSONField(blank=True, default=list, help_text='Meeting tags/categories')),
                ('follow_up_required', models.BooleanField(default=False, help_text='Whether this meeting requires follow-up')),
                ('follow_up_date', models.DateTimeField(blank=True, help_text='When to follow up (if required)', null=True)),
                ('follow_up_notes', models.TextField(blank=True, help_text='Follow-up notes and action items')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this meeting record is active')),
                ('contact', models.ForeignKey(blank=True, help_text='Contact this meeting is associated with', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='meetings', to='contacts.contact')),
                ('content_type', models.ForeignKey(blank=True, help_text='The type of entity this meeting is related to (optional)', null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('created_by', models.ForeignKey(help_text='User who logged this meeting', on_delete=django.db.models.deletion.CASCADE, related_name='created_meetings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Meeting',
                'verbose_name_plural': 'Meetings',
                'db_table': 'meeting',
                'ordering': ['-meeting_date', '-meeting_time', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MeetingComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='Comment content')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the comment was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When the comment was last updated')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this comment is active')),
                ('author', models.ForeignKey(help_text='User who wrote this comment', on_delete=django.db.models.deletion.CASCADE, related_name='meeting_comments', to=settings.AUTH_USER_MODEL)),
                ('meeting', models.ForeignKey(help_text='The meeting this comment belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='meetings.meeting')),
            ],
            options={
                'verbose_name': 'Meeting Comment',
                'verbose_name_plural': 'Meeting Comments',
                'db_table': 'meeting_comment',
                'ordering': ['created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='meeting',
            index=models.Index(fields=['status'], name='idx_meeting_status'),
        ),
        migrations.AddIndex(
            model_name='meeting',
            index=models.Index(fields=['priority'], name='idx_meeting_priority'),
        ),
        migrations.AddIndex(
            model_name='meeting',
            index=models.Index(fields=['created_by'], name='idx_meeting_creator'),
        ),
        migrations.AddIndex(
            model_name='meeting',
            index=models.Index(fields=['contact'], name='idx_meeting_contact'),
        ),
        migrations.AddIndex(
            model_name='meeting',
            index=models.Index(fields=['meeting_date'], name='idx_meeting_date'),
        ),
        migrations.AddIndex(
            model_name='meeting',
            index=models.Index(fields=['meeting_time'], name='idx_meeting_time'),
        ),
        migrations.AddIndex(
            model_name='meeting',
            index=models.Index(fields=['created_at'], name='idx_meeting_created'),
        ),
        migrations.AddIndex(
            model_name='meeting',
            index=models.Index(fields=['content_type', 'object_id'], name='idx_meeting_content'),
        ),
        migrations.AddIndex(
            model_name='meeting',
            index=models.Index(fields=['is_active'], name='idx_meeting_active'),
        ),
        migrations.AddIndex(
            model_name='meeting',
            index=models.Index(fields=['follow_up_required'], name='idx_meeting_followup'),
        ),
        migrations.AddIndex(
            model_name='meeting',
            index=models.Index(fields=['follow_up_date'], name='idx_meeting_followup_date'),
        ),
        migrations.AddConstraint(
            model_name='meeting',
            constraint=models.CheckConstraint(condition=models.Q(('duration__gt', 0), ('duration__isnull', True), _connector='OR'), name='meeting_duration_positive'),
        ),
        migrations.AddConstraint(
            model_name='meeting',
            constraint=models.CheckConstraint(condition=models.Q(('contact__isnull', False), models.Q(('contact_name__isnull', False), models.Q(('contact_name', ''), _negated=True)), _connector='OR'), name='meeting_contact_required'),
        ),
        migrations.AddIndex(
            model_name='meetingcomment',
            index=models.Index(fields=['meeting'], name='idx_meetingcomment_meeting'),
        ),
        migrations.AddIndex(
            model_name='meetingcomment',
            index=models.Index(fields=['author'], name='idx_meetingcomment_author'),
        ),
        migrations.AddIndex(
            model_name='meetingcomment',
            index=models.Index(fields=['created_at'], name='idx_meetingcomment_created'),
        ),
        migrations.AddIndex(
            model_name='meetingcomment',
            index=models.Index(fields=['is_active'], name='idx_meetingcomment_active'),
        ),
    ]
