# Generated by Django 5.1.11 on 2025-08-12 11:43

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Task title/summary', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Detailed task description')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', help_text='Task priority level', max_length=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed')], default='pending', help_text='Current task status', max_length=20)),
                ('deadline', models.DateTimeField(blank=True, help_text='Task deadline (optional)', null=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='When the task was completed', null=True)),
                ('object_id', models.PositiveIntegerField(blank=True, help_text='The ID of the entity this task is related to (optional)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the task was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When the task was last updated')),
                ('estimated_hours', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated hours to complete (optional)', max_digits=5, null=True)),
                ('actual_hours', models.DecimalField(blank=True, decimal_places=2, help_text='Actual hours spent (optional)', max_digits=5, null=True)),
                ('tags', models.JSONField(blank=True, default=list, help_text='Task tags/categories')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this task is active')),
                ('content_type', models.ForeignKey(blank=True, help_text='The type of entity this task is related to (optional)', null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('created_by', models.ForeignKey(help_text='User who created this task', on_delete=django.db.models.deletion.CASCADE, related_name='created_tasks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Task',
                'verbose_name_plural': 'Tasks',
                'db_table': 'task',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TaskComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='Comment content')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the comment was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When the comment was last updated')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this comment is active')),
                ('author', models.ForeignKey(help_text='User who wrote this comment', on_delete=django.db.models.deletion.CASCADE, related_name='task_comments', to=settings.AUTH_USER_MODEL)),
                ('task', models.ForeignKey(help_text='The task this comment belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='tasks.task')),
            ],
            options={
                'verbose_name': 'Task Comment',
                'verbose_name_plural': 'Task Comments',
                'db_table': 'task_comment',
                'ordering': ['created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['status'], name='idx_task_status'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['priority'], name='idx_task_priority'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['created_by'], name='idx_task_creator'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['deadline'], name='idx_task_deadline'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['created_at'], name='idx_task_created'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['content_type', 'object_id'], name='idx_task_content'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['is_active'], name='idx_task_active'),
        ),
        migrations.AddConstraint(
            model_name='task',
            constraint=models.CheckConstraint(condition=models.Q(('estimated_hours__gt', 0), ('estimated_hours__isnull', True), _connector='OR'), name='task_estimated_hours_positive'),
        ),
        migrations.AddConstraint(
            model_name='task',
            constraint=models.CheckConstraint(condition=models.Q(('actual_hours__gt', 0), ('actual_hours__isnull', True), _connector='OR'), name='task_actual_hours_positive'),
        ),
        migrations.AddIndex(
            model_name='taskcomment',
            index=models.Index(fields=['task'], name='idx_taskcomment_task'),
        ),
        migrations.AddIndex(
            model_name='taskcomment',
            index=models.Index(fields=['author'], name='idx_taskcomment_author'),
        ),
        migrations.AddIndex(
            model_name='taskcomment',
            index=models.Index(fields=['created_at'], name='idx_taskcomment_created'),
        ),
        migrations.AddIndex(
            model_name='taskcomment',
            index=models.Index(fields=['is_active'], name='idx_taskcomment_active'),
        ),
    ]
