# Generated by Django 5.1.11 on 2025-08-14 11:22

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ChartOfAccount',
            fields=[
                ('account_id', models.AutoField(primary_key=True, serialize=False)),
                ('account_name', models.CharField(db_index=True, max_length=255)),
                ('account_type', models.CharField(choices=[('cash', 'Cash'), ('bank', 'Bank'), ('accounts_receivable', 'Accounts Receivable'), ('other_current_asset', 'Other Current Asset'), ('fixed_asset', 'Fixed Asset'), ('other_asset', 'Other Asset'), ('intangible_asset', 'Intangible Asset'), ('right_to_use_asset', 'Right to Use Asset'), ('financial_asset', 'Financial Asset'), ('contingent_asset', 'Contingent Asset'), ('contract_asset', 'Contract Asset'), ('accounts_payable', 'Accounts Payable'), ('credit_card', 'Credit Card'), ('other_current_liability', 'Other Current Liability'), ('long_term_liability', 'Long Term Liability'), ('other_liability', 'Other Liability'), ('contract_liability', 'Contract Liability'), ('refund_liability', 'Refund Liability'), ('loans_and_borrowing', 'Loans and Borrowing'), ('lease_liability', 'Lease Liability'), ('employee_benefit_liability', 'Employee Benefit Liability'), ('contingent_liability', 'Contingent Liability'), ('financial_liability', 'Financial Liability'), ('equity', 'Equity'), ('income', 'Income'), ('other_income', 'Other Income'), ('finance_income', 'Finance Income'), ('other_comprehensive_income', 'Other Comprehensive Income'), ('expense', 'Expense'), ('cost_of_goods_sold', 'Cost of Goods Sold'), ('other_expense', 'Other Expense'), ('manufacturing_expense', 'Manufacturing Expense'), ('impairment_expense', 'Impairment Expense'), ('depreciation_expense', 'Depreciation Expense'), ('employee_benefit_expense', 'Employee Benefit Expense'), ('lease_expense', 'Lease Expense'), ('finance_expense', 'Finance Expense'), ('tax_expense', 'Tax Expense')], db_index=True, max_length=50)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('created_time', models.DateTimeField(auto_now_add=True)),
                ('last_modified_time', models.DateTimeField(auto_now=True, db_index=True)),
                ('account_code', models.CharField(blank=True, db_index=True, help_text='Unique code per tenant for account identification', max_length=50)),
                ('is_user_created', models.BooleanField(default=True)),
                ('is_system_account', models.BooleanField(default=False, help_text='System accounts cannot be modified or deleted')),
                ('is_standalone_account', models.BooleanField(default=False)),
                ('parent_account_name', models.CharField(blank=True, editable=False, help_text='Cached parent account name', max_length=255)),
                ('depth', models.IntegerField(default=0, editable=False, help_text='Depth in account hierarchy (0 for root accounts)')),
                ('is_child_present', models.BooleanField(default=False, editable=False, help_text='Indicates if this account has child accounts')),
                ('child_count', models.IntegerField(default=0, editable=False, help_text='Number of direct child accounts')),
                ('currency_id', models.CharField(default='USD', help_text='Currency identifier', max_length=50)),
                ('currency_code', models.CharField(default='USD', help_text='Currency code (e.g., USD, EUR, GBP)', max_length=10)),
                ('current_balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Current account balance', max_digits=19, validators=[django.core.validators.MinValueValidator(Decimal('-999999999999999.99'))])),
                ('closing_balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Closing balance for the period', max_digits=19, validators=[django.core.validators.MinValueValidator(Decimal('-999999999999999.99'))])),
                ('opening_balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Opening balance for the account', max_digits=19, validators=[django.core.validators.MinValueValidator(Decimal('-999999999999999.99'))])),
                ('opening_balance_date', models.DateField(blank=True, help_text='Date of opening balance', null=True)),
                ('opening_balance_type', models.CharField(blank=True, choices=[('debit', 'Debit'), ('credit', 'Credit')], help_text='Type of opening balance (debit or credit)', max_length=10)),
                ('is_involved_in_transaction', models.BooleanField(default=False, help_text='Indicates if account is used in any transaction')),
                ('has_transaction', models.BooleanField(default=False, help_text='Indicates if account has transactions')),
                ('has_attachment', models.BooleanField(default=False, help_text='Indicates if account has attachments')),
                ('description', models.TextField(blank=True, help_text='Account description or notes')),
                ('bank_account_number', models.CharField(blank=True, help_text='Bank account number (for bank accounts)', max_length=100)),
                ('show_on_dashboard', models.BooleanField(default=False, help_text='Display this account on dashboard')),
                ('include_in_vat_return', models.BooleanField(default=False, help_text='Include in VAT returns (UK specific)')),
                ('can_show_in_ze', models.BooleanField(default=False, help_text='Can show in Zoho Expense')),
                ('parent_account', models.ForeignKey(blank=True, help_text='Parent account for hierarchical structure', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='children', to='accounting.chartofaccount')),
            ],
            options={
                'verbose_name': 'Chart of Account',
                'verbose_name_plural': 'Chart of Accounts',
                'db_table': 'finance_chart_of_accounts',
                'ordering': ['account_code', 'account_name'],
            },
        ),
        migrations.CreateModel(
            name='AccountTransaction',
            fields=[
                ('categorized_transaction_id', models.AutoField(primary_key=True, serialize=False)),
                ('transaction_id', models.CharField(help_text='Unique transaction identifier', max_length=50, unique=True)),
                ('transaction_type', models.CharField(choices=[('invoice', 'Invoice'), ('customer_payment', 'Customer Payment'), ('bills', 'Bills'), ('vendor_payment', 'Vendor Payment'), ('credit_notes', 'Credit Notes'), ('creditnote_refund', 'Credit Note Refund'), ('expense', 'Expense'), ('card_payment', 'Card Payment'), ('purchase_or_charges', 'Purchase or Charges'), ('journal', 'Journal'), ('deposit', 'Deposit'), ('refund', 'Refund'), ('transfer_fund', 'Transfer Fund'), ('base_currency_adjustment', 'Base Currency Adjustment'), ('opening_balance', 'Opening Balance'), ('sales_without_invoices', 'Sales Without Invoices'), ('expense_refund', 'Expense Refund'), ('tax_refund', 'Tax Refund'), ('receipt_from_initial_debtors', 'Receipt from Initial Debtors'), ('owner_contribution', 'Owner Contribution'), ('interest_income', 'Interest Income'), ('other_income', 'Other Income'), ('owner_drawings', 'Owner Drawings'), ('payment_to_initial_creditors', 'Payment to Initial Creditors')], db_index=True, help_text='Type of transaction', max_length=50)),
                ('transaction_status', models.CharField(choices=[('draft', 'Draft'), ('pending', 'Pending'), ('approved', 'Approved'), ('posted', 'Posted'), ('void', 'Void'), ('cancelled', 'Cancelled')], db_index=True, default='draft', help_text='Current status of the transaction', max_length=20)),
                ('transaction_source', models.CharField(blank=True, help_text='Source system or module that created this transaction', max_length=50)),
                ('transaction_date', models.DateField(db_index=True, help_text='Date of the transaction')),
                ('entry_number', models.CharField(db_index=True, help_text='Entry reference number (e.g., INV-00004)', max_length=50)),
                ('currency_id', models.CharField(default='USD', help_text='Currency identifier', max_length=50)),
                ('currency_code', models.CharField(default='USD', help_text='Currency code', max_length=10)),
                ('exchange_rate', models.DecimalField(decimal_places=6, default=Decimal('1.000000'), help_text='Exchange rate to base currency', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.000001'))])),
                ('debit_or_credit', models.CharField(choices=[('debit', 'Debit'), ('credit', 'Credit')], help_text='Whether this is a debit or credit entry', max_length=10)),
                ('debit_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Debit amount (positive value)', max_digits=19, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('credit_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Credit amount (positive value)', max_digits=19, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('base_currency_debit_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Debit amount in base currency', max_digits=19, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('base_currency_credit_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Credit amount in base currency', max_digits=19, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('customer_id', models.CharField(blank=True, db_index=True, help_text='Customer ID if applicable', max_length=50)),
                ('vendor_id', models.CharField(blank=True, db_index=True, help_text='Vendor ID if applicable', max_length=50)),
                ('payee', models.CharField(blank=True, help_text='Payee name', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Transaction description or notes')),
                ('reference_number', models.CharField(blank=True, db_index=True, help_text='External reference number', max_length=100)),
                ('offset_account_name', models.CharField(blank=True, help_text='Name of the offset account', max_length=255)),
                ('reconcile_status', models.CharField(blank=True, choices=[('unreconciled', 'Unreconciled'), ('reconciled', 'Reconciled'), ('partially_reconciled', 'Partially Reconciled')], default='unreconciled', help_text='Bank reconciliation status', max_length=20)),
                ('invoice_id', models.CharField(blank=True, db_index=True, help_text='Related invoice ID', max_length=50)),
                ('estimate_id', models.CharField(blank=True, db_index=True, help_text='Related estimate ID', max_length=50)),
                ('sales_order_id', models.CharField(blank=True, db_index=True, help_text='Related sales order ID', max_length=50)),
                ('payment_id', models.CharField(blank=True, db_index=True, help_text='Related payment ID', max_length=50)),
                ('created_time', models.DateTimeField(auto_now_add=True, help_text='Transaction creation timestamp')),
                ('modified_time', models.DateTimeField(auto_now=True, help_text='Last modification timestamp')),
                ('posted_time', models.DateTimeField(blank=True, help_text='When the transaction was posted to the ledger', null=True)),
                ('is_manual_entry', models.BooleanField(default=False, help_text='Whether this was manually entered or auto-generated')),
                ('is_reversal', models.BooleanField(default=False, help_text='Whether this is a reversal transaction')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created the transaction', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_transactions', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, help_text='User who last modified the transaction', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modified_transactions', to=settings.AUTH_USER_MODEL)),
                ('posted_by', models.ForeignKey(blank=True, help_text='User who posted the transaction', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='posted_transactions', to=settings.AUTH_USER_MODEL)),
                ('reversal_of', models.ForeignKey(blank=True, help_text='Original transaction if this is a reversal', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reversals', to='accounting.accounttransaction')),
                ('account', models.ForeignKey(help_text='Account affected by this transaction', on_delete=django.db.models.deletion.PROTECT, related_name='transactions', to='accounting.chartofaccount')),
            ],
            options={
                'verbose_name': 'Account Transaction',
                'verbose_name_plural': 'Account Transactions',
                'db_table': 'finance_account_transactions',
                'ordering': ['-transaction_date', '-created_time'],
            },
        ),
        migrations.CreateModel(
            name='AccountDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_id', models.CharField(max_length=50, unique=True)),
                ('file_name', models.CharField(max_length=255)),
                ('file_path', models.FileField(upload_to='account_documents/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('uploaded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='accounting.chartofaccount')),
            ],
            options={
                'db_table': 'finance_account_documents',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.AddIndex(
            model_name='chartofaccount',
            index=models.Index(fields=['account_type', 'is_active'], name='finance_cha_account_b7fdf1_idx'),
        ),
        migrations.AddIndex(
            model_name='chartofaccount',
            index=models.Index(fields=['parent_account', 'depth'], name='finance_cha_parent__d869d7_idx'),
        ),
        migrations.AddIndex(
            model_name='chartofaccount',
            index=models.Index(fields=['account_code'], name='finance_cha_account_f13c18_idx'),
        ),
        migrations.AddConstraint(
            model_name='chartofaccount',
            constraint=models.UniqueConstraint(condition=models.Q(('account_code__gt', '')), fields=('account_code',), name='unique_account_code_per_tenant'),
        ),
        migrations.AddIndex(
            model_name='accounttransaction',
            index=models.Index(fields=['transaction_date', 'transaction_type'], name='finance_acc_transac_8615ad_idx'),
        ),
        migrations.AddIndex(
            model_name='accounttransaction',
            index=models.Index(fields=['account', 'transaction_status'], name='finance_acc_account_9576a1_idx'),
        ),
        migrations.AddIndex(
            model_name='accounttransaction',
            index=models.Index(fields=['customer_id', 'transaction_date'], name='finance_acc_custome_5e65b0_idx'),
        ),
        migrations.AddIndex(
            model_name='accounttransaction',
            index=models.Index(fields=['vendor_id', 'transaction_date'], name='finance_acc_vendor__fb3841_idx'),
        ),
        migrations.AddIndex(
            model_name='accounttransaction',
            index=models.Index(fields=['entry_number'], name='finance_acc_entry_n_48ebcb_idx'),
        ),
        migrations.AddIndex(
            model_name='accounttransaction',
            index=models.Index(fields=['reference_number'], name='finance_acc_referen_a0b7ef_idx'),
        ),
        migrations.AddIndex(
            model_name='accounttransaction',
            index=models.Index(fields=['reconcile_status', 'account'], name='finance_acc_reconci_1ffa60_idx'),
        ),
    ]
